rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Temporarily allow any authenticated user to be an admin for debugging.
      // WARNING: This is not secure for production.
      return request.auth != null;
    }
    
    function isCoachFor(application) {
      let coachDoc = get(/databases/$(database)/documents/coaches/$(application.coachId));
      // This part might not work if coaches don't have auth accounts,
      // but we leave it for now as the primary issue is admin access.
      return request.auth != null && coachDoc.data.personalInfo.uid == request.auth.uid;
    }
    
    // --- Collection-level access grants ---

    match /products/{docId} {
      allow read: if true;
      allow list, write: if isAdmin();
    }
    
    match /coaches/{docId} {
      allow read: if true;
      allow list, write: if isAdmin();
    }
    
    match /settings/{docId} {
      allow read: if true;
      allow list, write: if isAdmin();
    }
    
    match /shippingOptions/{docId} {
      allow read: if true;
      allow list, write: if isAdmin();
    }
    
    match /orders/{docId} {
      allow create: if true;
      allow list, read, update, delete: if isAdmin();
    }
    
    match /coachingApplications/{docId} {
      allow create: if true;
      // Let admins do everything. Coaches can update (accept) or delete (reject).
      allow read, list, update, delete: if isAdmin() || isCoachFor(resource.data);
    }
    
    match /memberships/{docId} {
      // Memberships are sensitive and should only be read by admins.
      // The server-side code handles validation for users.
      allow read, list, write: if isAdmin();
    }
    
    match /counters/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /contactSubmissions/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /expenses/{docId} {
      allow read, write: if isAdmin();
    }

    match /admins/{docId} {
      allow read, write: if isAdmin();
    }
  }
}